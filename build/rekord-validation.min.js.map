{"version":3,"sources":["header.js","util.js","rules/collection.js","rules/dates.js","rules/field_list.js","rules/fields.js","rules/foreign.js","rules/if.js","rules/list.js","rules/range.js","rules/regex.js","rules/sizes.js","validation.js","expressions/date.js","expressions/field.js","expressions/relative.js","expressions/today.js","expressions/tomorrow.js","expressions/yesterday.js","rules/accepted.js","rules/required.js","rules/types.js","transforms/abs.js","transforms/apply.js","transforms/base64.js","transforms/ceil.js","transforms/endOfDay.js","transforms/filter.js","transforms/floor.js","transforms/mod.js","transforms/null.js","transforms/round.js","transforms/startOfDay.js","transforms/trim.js","transforms/unbase64.js","footer.js"],"names":["global","Rekord","undefined","tryParseFloat","x","parsed","parseFloat","isNaN","tryParseInt","parseInt","startOfDay","d","isDate","setHours","isNumber","endOfDay","ruleGenerator","ruleName","defaultMessage","isInvalid","Validation","Rules","field","params","database","getAlias","message","checkNoParams","messageTemplate","determineMessage","value","model","setMessage","setValue","newValue","generateMessage","joinFriendly","arr","lastSeparator","itemSeparator","copy","slice","i","length","last","pop","join","mapFromArray","map","alias","extra","isFunction","base","$field","$alias","$value","transfer","isObject","format","collectionRuleGenerator","matchField","matchValue","equality","isString","comma","indexOf","substring","isArray","equals","equalsCompare","fields","otherField","$matchField","$matchAlias","$matchValue","dateRuleGenerator","dateExpression","parseExpression","parseDate","parsedTime","getTime","noop","$date","date","fieldListRuleGenerator","matchValues","parts","split","shift","values","list","$params","$list","fieldsRuleGenerator","fieldNames","fieldAliases","$fields","$fieldAliases","foreignRuleGenerator","modelName","models","fieldName","isValue","name","ModelCollection","get","success","modelClass","all","isRekord","$class","subRuleGenerator","otherRules","colon","rules","validators","parseRules","invalids","setInvalid","Stop","listRuleGenerator","inList","isPrimitiveArray","rangeRuleGenerator","defaultMessages","start","end","range","string","number","object","$start","$end","size","sizeof","type","typeMessage","$size","regexRuleGenerator","regex","test","sizeRuleGenerator","$number","Model","Database","Promise","Collection","isEmpty","isBoolean","isRegExp","addMethod","replaceMethod","on","Events","Plugins","db","options","aliases","validation","Defaults","messages","required","validations","prototype","$this","this","$trigger","PreValidate","$valid","$validations","$validationMessages","chain","$get","fieldValid","push","ValidatePass","ValidateFail","$init","apply","arguments","$save","$isDeleted","debug","Debugs","SAVE_DELETED","$db","resolve","$validate","Expression","Expressions","Delimiter","Escape","RuleSeparator","rule","validator","parseRule","ruleMessageOrData","ruleMessage","ruleInput","input","charAt","customValidator","ruleParams","validatorFactory","expr","parsers","parser","expressionFunction","functionName","result","RELATIVE_REGEX","RELATIVE_UNITS","ms","millisecond","milliseconds","s","second","seconds","min","mins","minute","minutes","hr","hour","hours","day","days","wk","week","weeks","month","months","yr","year","years","relative","exec","amount","unit","unitScale","Date","setTime","getter","setter","today","tomorrow","setDate","getDate","yesterday","accepted","acceptable","valueString","toLowerCase","1","yes","y","true","contains","m","validate","messageOption","invalid","pluck","confirmed","different","valid","invalidCount","totalCount","RegExp","numeric","Math","floor","mapped","yesno","t","false","f","no","n","0","abs","$set","base64","btoa","ceil","filter","splice","prop","mod","round","trim","String","replace","unbase64","atob"],"mappings":"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","file":"rekord-validation.min.js","sourcesContent":["(function(global, Rekord, undefined)\n{\n  var Model = Rekord.Model;\n  var Database = Rekord.Database;\n  var Promise = Rekord.Promise;\n  var Collection = Rekord.Collection;\n\n  var isEmpty = Rekord.isEmpty;\n  var isString = Rekord.isString;\n  var isArray = Rekord.isArray;\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var isDate = Rekord.isDate;\n  var isNumber = Rekord.isNumber;\n  var isBoolean = Rekord.isBoolean;\n  var isValue = Rekord.isValue;\n  var isPrimitiveArray = Rekord.isPrimitiveArray;\n  var isRegExp = Rekord.isRegExp;\n\n  var noop = Rekord.noop;\n  var equalsCompare = Rekord.equalsCompare;\n  var equals = Rekord.equals;\n  var indexOf = Rekord.indexOf;\n  var sizeof = Rekord.sizeof;\n\n  var split = Rekord.split;\n  var transfer = Rekord.transfer;\n  var format = Rekord.format;\n\n  var parseDate = Rekord.parseDate;\n\n  var addMethod = Rekord.addMethod;\n  var replaceMethod = Rekord.replaceMethod;\n","function tryParseFloat(x)\n{\n  var parsed = parseFloat( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseInt(x)\n{\n  var parsed = parseInt( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction startOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 0, 0, 0, 0 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000);\n  }\n\n  return d;\n}\n\nfunction endOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 23, 59, 59, 999 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000) + 86400000 - 1;\n  }\n\n  return d;\n}\n\nfunction ruleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nfunction determineMessage(ruleName, message)\n{\n  return message || Validation.Rules[ ruleName ].message;\n}\n\nfunction joinFriendly(arr, lastSeparator, itemSeparator, getAlias)\n{\n  var copy = arr.slice();\n\n  if ( getAlias )\n  {\n    for (var i = 0; i < copy.length; i++)\n    {\n      copy[ i ] = getAlias( copy[ i ] );\n    }\n  }\n\n  var last = copy.pop();\n  var lastSeparator = lastSeparator || 'and';\n  var itemSeparator = itemSeparator || ', ';\n\n  switch (copy.length) {\n    case 0:\n      return last;\n    case 1:\n      return copy[ 0 ] + ' ' + lastSeparator + ' ' + last;\n    default:\n      return copy.join( itemSeparator ) + itemSeparator + lastSeparator + ' ' + last;\n  }\n}\n\nfunction mapFromArray(arr, value)\n{\n  var map = {};\n\n  for (var i = 0; i < arr.length; i++)\n  {\n    map[ arr[ i ] ] = value;\n  }\n\n  return map;\n}\n\nfunction checkNoParams(ruleName, field, params)\n{\n  if ( params )\n  {\n    throw 'the rule ' + ruleName + ' for field ' + field + ' has no arguments';\n  }\n}\n\nfunction generateMessage(field, alias, value, model, message, extra)\n{\n  if ( isFunction( message ) )\n  {\n    message = message( field, alias, value, model, extra );\n  }\n\n  var base = {};\n  base.$field = field;\n  base.$alias = alias;\n  base.$value = value;\n\n  transfer( model, base );\n\n  if ( isObject( extra ) )\n  {\n    transfer( extra, base );\n  }\n\n  return format( message, base );\n}\n","// contains:field,value\ncollectionRuleGenerator('contains',\n  '{$alias} does not contain an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return !value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\n// not_contains:field,value\ncollectionRuleGenerator('not_contains',\n  '{$alias} contains an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\nfunction collectionRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var matchField, matchValue, equality;\n\n    if ( isString( params ) )\n    {\n      var comma = params.indexOf(',');\n\n      if ( comma === -1 )\n      {\n        throw ruleName + ' validation rule requires field & value arguments';\n      }\n\n      matchField = params.substring( 0, comma );\n      matchValue = params.substring( comma + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params[ 0 ];\n      matchValue = params[ 1 ];\n      equality = params[ 2 ];\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValue = params.value;\n      equality = params.equals;\n    }\n\n    if ( !isFunction( equality ) )\n    {\n      equality = equalsCompare;\n    }\n\n    if ( indexOf( database.fields, matchField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $matchValue: matchValue\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValue, equality ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.validate = function(field, params, database, getAlias, message)\n{\n  // message, models, validations\n  var messageOption = params || 'message';\n  var messageTemplate = determineMessage( 'validate', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      var invalid = new Collection();\n\n      for (var i = 0; i < value.length; i++)\n      {\n        var model = value[ i ];\n\n        if ( model && model.$validate && !model.$validate() )\n        {\n          invalid.push( model );\n        }\n      }\n\n      if ( invalid.length )\n      {\n        switch (messageOption)\n        {\n          case 'models':\n            setMessage( invalid );\n            break;\n          case 'validations':\n            setMessage( invalid.pluck( '$validations', '$$key' ) );\n            break;\n          default: // message\n            setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n            break;\n        }\n      }\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.validate.message = '{$alias} is not valid.';\n","// after:today\ndateRuleGenerator('after',\n  '{$alias} must be after {$date}.',\n  function isInvalid(value, date) {\n    return value < endOfDay( date );\n  }\n);\n\n// after_on:tomorrow\ndateRuleGenerator('after_on',\n  '{$alias} must be after or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value < date;\n  }\n);\n\n// before:yesterday\ndateRuleGenerator('before',\n  '{$alias} must be before {$date}.',\n  function isInvalid(value, date) {\n    return value > date;\n  }\n);\n\n// before_on:+2days\ndateRuleGenerator('before_on',\n  '{$alias} must be before or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value > endOfDay( date );\n  }\n);\n\n// date\nruleGenerator('date_like',\n  '{$alias} must be a valid date.',\n  function isInvalid(value, model, setValue) {\n    var parsed = parseDate( value );\n    var invalid = parsed === false;\n    if ( !invalid ) {\n      setValue( parsed.getTime() );\n    }\n    return invalid;\n  }\n);\n\nfunction dateRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a date expression argument';\n    }\n\n    var dateExpression;\n\n    if ( isString( params ) )\n    {\n      dateExpression = Validation.parseExpression( params, database );\n    }\n    else if ( isFunction( params ) )\n    {\n      dateExpression = params;\n    }\n    else\n    {\n      var parsed = parseDate( params );\n\n      if ( parsed !== false )\n      {\n        var parsedTime = parsed.getTime();\n\n        dateExpression = function()\n        {\n          return parsedTime;\n        };\n      }\n    }\n\n    if ( !dateExpression || dateExpression === noop )\n    {\n      throw params + ' is not a valid date expression for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $date: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var parsed = parseDate( value );\n\n      if ( parsed !== false )\n      {\n        value = parsed.getTime();\n\n        var date = dateExpression( value, model );\n\n        if ( isNumber( date ) && isInvalid( value, date ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n// required_if:X,Y,...\nfieldListRuleGenerator('required_if',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\n// required_unless:X,Y,...\nfieldListRuleGenerator('required_unless',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = !map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldListRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a field and list arguments';\n    }\n\n    var matchField, matchValues;\n\n    if ( isString( params ) )\n    {\n      var parts = split( params, /(,)/, '\\\\' );\n\n      matchField = parts.shift();\n      matchValues = parts;\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params.shift();\n      matchValues = params;\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValues = params.values;\n    }\n\n    if ( indexOf( database.fields, matchField ) === false )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( matchValues );\n    var extra = {\n      $params: params,\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $list: list\n    };\n    var map = mapFromArray( matchValues, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValues, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// confirmed:X\nfieldsRuleGenerator('confirmed',\n  '{$alias} must match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var confirmed = true;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        confirmed = false;\n      }\n    }\n\n    return !confirmed;\n  }\n);\n\n// different:X\nfieldsRuleGenerator('different',\n  '{$alias} must not match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var different = false;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        different = true;\n      }\n    }\n\n    return !different;\n  }\n);\n\n// if_valid:X\nfieldsRuleGenerator('if_valid',\n  '',\n  function isInvalid(value, model, fields, setValue) {\n    var valid = true;\n\n    for (var i = 0; i < fields.length && valid; i++)\n    {\n      if ( model.$validations[ fields[ i ] ] )\n      {\n        valid = false;\n      }\n    }\n\n    if ( !valid )\n    {\n      setValue( Validation.Stop );\n    }\n\n    return false;\n  }\n);\n\n// The field under validation must be present only if any of the other specified fields are present.\n// required_with:X,Y,...\nfieldsRuleGenerator('required_with',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only if all of the other specified fields are present.\n// required_with_all:X,Y,...\nfieldsRuleGenerator('required_with_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when any of the other specified fields are not present.\n// required_without:X,Y,...\nfieldsRuleGenerator('required_without',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when all of the other specified fields are not present.\n// required_without_all:X,Y,...\nfieldsRuleGenerator('required_without_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldsRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires an array of fields argument';\n    }\n\n    var fields = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( indexOf( database.fields, fields[ i ] ) === -1 )\n      {\n        throw fields[ i ] + ' is not a valid field for the ' + ruleName + ' rule';\n      }\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var fieldNames = joinFriendly( fields );\n    var fieldAliases = joinFriendly( fields, false, false, getAlias );\n    var extra = {\n      $fields: fieldNames,\n      $fieldAliases: fieldAliases\n    };\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, fields, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n};\n","// exists:X,Y\nforeignRuleGenerator('exists',\n  '{$alias} must match an existing {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return !models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// unique:X,Y\nforeignRuleGenerator('unique',\n  '{$alias} must be a unique {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// 'ruleName'\n// 'ruleName:name'\n// 'ruleName:,field'\n// 'ruleName:name,field'\n// 'ruleName:name,field': '...'\n// 'ruleName': {input: {field: 'field', model: 'name'}, message: '...'}\n// 'ruleName': {input: {field: 'field', model: ModelClass}, message: '...'}\n// 'ruleName': {input: {field: 'field', models: [...]}, message: '...'}\n// 'ruleName': {field: 'field', model: 'name'}\n// 'ruleName': {field: 'field', model: ModelClass}\n// 'ruleName': {field: 'field', models: [...]}\nfunction foreignRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var modelName, models, fieldName;\n\n    if ( !isValue( params ) || isString( params ) )\n    {\n      var parts = split( params || '', /(\\s*,\\s*)/, '\\\\' );\n      modelName = parts[0] || database.name;\n      fieldName = parts[1] || field;\n      models = null;\n    }\n    else if ( isArray( params ) )\n    {\n      modelName = isString( params[0] ) ? params.shift() : database.name;\n      fieldName = isString( params[0] ) ? params.shift() : field;\n      models = new ModelCollection( database, params );\n    }\n    else if ( isObject( params ) )\n    {\n      modelName = params.model || database.name;\n      fieldName = params.field || field;\n      models = params.models;\n    }\n\n    if ( !models )\n    {\n      if ( !modelName )\n      {\n        throw 'model, model class, or models is required for ' + ruleName + ' rule';\n      }\n\n      if ( isString( modelName ) )\n      {\n        Rekord.get( modelName ).success(function(modelClass)\n        {\n          models = modelClass.all();\n        });\n      }\n      else if ( isRekord( modelName ) )\n      {\n        models = modelName.all();\n      }\n    }\n\n    if ( indexOf( database.fields, fieldName ) === false )\n    {\n      throw fieldName + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $class: modelName,\n      $matchField: fieldName,\n      $matchAlias: getAlias( fieldName )\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( models && isValue( value ) )\n      {\n        if ( isInvalid( value, model, models, fieldName ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// if:due_date:before:today|required\n\n// if all rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount > 0;\n  }\n);\n\n// if any rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_any',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount >= totalCount;\n  }\n);\n\n// if no rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_not',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount < totalCount;\n  }\n);\n\n\n\nfunction subRuleGenerator(ruleName, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a validation rule argument';\n    }\n\n    var otherField, otherRules;\n\n    if ( isString( params ) )\n    {\n      var colon = params.indexOf( ':' );\n\n      if ( colon === -1 )\n      {\n        throw params + ' is not a valid argument for the ' + ruleName + ' rule';\n      }\n\n      otherField = params.substring( 0, colon ) || field;\n      otherRules = params.substring( colon + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      otherField = params.shift() || field;\n      otherRules = params;\n    }\n    else if ( isObject( params ) )\n    {\n      otherField = params.field || field;\n      otherRules = params.rules;\n    }\n\n    if ( indexOf( database.fields, otherField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    if ( !otherRules )\n    {\n      throw 'rules are required for the ' + ruleName + ' rule';\n    }\n\n    var validators = Validation.parseRules( otherRules, otherField, database, getAlias );\n\n    return function(value, model, setMessage)\n    {\n      var invalids = 0;\n\n      var setInvalid = function(message)\n      {\n        if ( message )\n        {\n          invalids++;\n        }\n      };\n\n      for (var i = 0; i < validators.length; i++)\n      {\n        validators[ i ]( value, model, setInvalid );\n      }\n\n      return isInvalid( invalids, validators.length ) ? Validation.Stop : value;\n    };\n  };\n}\n","// in:X,Y,Z,...\nlistRuleGenerator('in',\n  '{$alias} must be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return !inList( value, model );\n  }\n);\n\n// not_in:X,Y,Z,...\nlistRuleGenerator('not_in',\n  '{$alias} must not be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return inList( value, model )\n  }\n);\n\nfunction listRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a list argument';\n    }\n\n    var values, inList = false;\n\n    if ( isString( params ) )\n    {\n      values = split( params, /(,)/, '\\\\' );\n    }\n    else if ( isArray( params ) )\n    {\n      values = params;\n    }\n    else if ( isFunction( params ) )\n    {\n      values = inList;\n    }\n\n    if ( inList !== false )\n    {\n      if ( !values || values.length === 0 )\n      {\n        throw params + ' is not a valid list of values for the ' + ruleName + ' rule';\n      }\n    }\n\n    if ( isPrimitiveArray( values ) )\n    {\n      var map = mapFromArray( values, true );\n\n      inList = function(value)\n      {\n        return map[ value ];\n      };\n    }\n    else\n    {\n      inList = function(value)\n      {\n        return indexOf( values, value, equals );\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( values, 'or' );\n    var extra = {\n      $params: params,\n      $list: list\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, inList ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// between:3,10\nrangeRuleGenerator('between', {\n    'string': '{$alias} must have between {$start} to {$end} characters.',\n    'number': '{$alias} must be between {$start} and {$end}.',\n    'object': '{$alias} must have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value < start || value > end;\n  }\n);\n\n// not_between\nrangeRuleGenerator('not_between', {\n    'string': '{$alias} must not have between {$start} to {$end} characters.',\n    'number': '{$alias} must not be between {$start} and {$end}.',\n    'object': '{$alias} must not have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value >= start && value <= end;\n  }\n);\n\nfunction rangeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a range argument';\n    }\n\n    var start, end;\n\n    if ( isString( params ) )\n    {\n      var range = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n      start = parseFloat( range[0] );\n      end = parseFloat( range[1] );\n    }\n    else if ( isArray( params ) )\n    {\n      start = params[ 0 ];\n      end = params[ 1 ];\n    }\n    else if ( isObject( params ) )\n    {\n      start = params.start;\n      end = params.end;\n    }\n\n    if ( isNaN( start ) || isNaN( end ) )\n    {\n      throw params + ' is not a valid range of numbers for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $start: start,\n      $end: end\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, start, end ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\n\nregexRuleGenerator('alpha',\n  '{$alias} should only contain alphabetic characters.',\n    /^[a-zA-Z]*$/\n);\n\nregexRuleGenerator('alpha_dash',\n  '{$alias} should only contain alpha-numeric characters, dashes, and underscores.',\n  /^[a-zA-Z0-9_-]*$/\n);\n\nregexRuleGenerator('alpha_num',\n  '{$alias} should only contain alpha-numeric characters.',\n  /^[a-zA-Z0-9]*$/\n);\n\nregexRuleGenerator('email',\n  '{$alias} is not a valid email.',\n  /^.+@.+\\..+$/\n);\n\nregexRuleGenerator('url',\n  '{$alias} is not a valid URL.',\n  /^(https?:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('uri',\n  '{$alias} is not a valid URI.',\n  /^(\\w+:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('phone',\n  '{$alias} is not a valid phone number.',\n  /^1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?$/\n);\n\nfunction regexRuleGenerator(ruleName, defaultMessage, regex)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      if ( !regex.test( value ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.regex = function(field, params, database, getAlias, message)\n{\n  var regex;\n\n  if ( isString( params ) )\n  {\n    var parsed = /^\\/(.*)\\/([gmi]*)$/.exec( params );\n\n    if ( parsed )\n    {\n      regex = new RegExp( parsed[1], parsed[2] );\n    }\n  }\n  else if ( isRegExp( params ) )\n  {\n    regex = params;\n  }\n\n  if ( !regex )\n  {\n    throw params + ' is not a valid regular expression for the regex rule';\n  }\n\n  var messageTemplate = determineMessage( 'regex', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( !regex.test( value ) )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.regex.message = '{$alias} is not a valid value.';\n","// min:3\nsizeRuleGenerator('min', {\n    'string': '{$alias} must have a minimum of {$number} characters.',\n    'number': '{$alias} must be at least {$number}.',\n    'object': '{$alias} must have at least {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value < number;\n  }\n);\n\n// greater_than:0\nsizeRuleGenerator('greater_than', {\n    'string': '{$alias} must have more than {$number} characters.',\n    'number': '{$alias} must be greater than {$number}.',\n    'object': '{$alias} must have more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value <= number;\n  }\n);\n\n// max:10\nsizeRuleGenerator('max', {\n    'string': '{$alias} must have no more than {$number} characters.',\n    'number': '{$alias} must be no more than {$number}.',\n    'object': '{$alias} must have no more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value > number;\n  }\n);\n\n// less_than:5\nsizeRuleGenerator('less_than', {\n    'string': '{$alias} must have less than {$number} characters.',\n    'number': '{$alias} must be less than {$number}.',\n    'object': '{$alias} must have less than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value >= number;\n  }\n);\n\n// equal:4.5\nsizeRuleGenerator('equal', {\n    'string': '{$alias} must have {$number} characters.',\n    'number': '{$alias} must equal {$number}.',\n    'object': '{$alias} must have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value !== number;\n  }\n);\n\n// not_equal:0\nsizeRuleGenerator('not_equal', {\n    'string': '{$alias} must not have {$number} characters.',\n    'number': '{$alias} must not equal {$number}.',\n    'object': '{$alias} must not have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value === number;\n  }\n);\n\nfunction sizeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var number;\n\n    if ( isString( params ) )\n    {\n      number = parseFloat( params );\n    }\n    else if ( isNumber( params ) )\n    {\n      number = params;\n    }\n\n    if ( isNaN( number ) )\n    {\n      throw '\"' + params + '\" is not a valid number for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $number: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, number ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var validation = options.validation || Database.Defaults.validation;\n\n  if ( isEmpty( validation ) )\n  {\n    return;\n  }\n\n  var rules = validation.rules || {};\n  var messages = validation.messages || {};\n  var aliases = validation.aliases || {};\n  var required = !!validation.required;\n\n  function getAlias(field)\n  {\n    return aliases[ field ] || field;\n  }\n\n  db.validations = {};\n\n  for ( var field in rules )\n  {\n    db.validations[ field ] = Validation.parseRules( rules[ field ], field, db, getAlias, messages[ field ] )\n  }\n\n  addMethod( model.prototype, '$validate', function()\n  {\n    var $this = this;\n\n    this.$trigger( Model.Events.PreValidate, [this] );\n\n    this.$valid = true;\n    this.$validations = {};\n    this.$validationMessages.length = 0;\n\n    for (var field in db.validations)\n    {\n      var chain = db.validations[ field ];\n      var value = this.$get( field );\n      var fieldValid = true;\n\n      var setMessage = function(message)\n      {\n        // Only accept for the first valid message\n        if ( message && fieldValid )\n        {\n          fieldValid = false;\n\n          $this.$validations[ field ] = message;\n          $this.$validationMessages.push( message );\n          $this.$valid = false;\n        }\n      };\n\n      for (var i = 0; i < chain.length && fieldValid && value !== Validation.Stop; i++)\n      {\n        value = chain[ i ]( value, this, setMessage );\n      }\n    }\n\n    this.$trigger( this.$valid ? Model.Events.ValidatePass : Model.Events.ValidateFail, [this] );\n\n    return this.$valid;\n  });\n\n  replaceMethod( model.prototype, '$init', function($init)\n  {\n    return function()\n    {\n      this.$valid = undefined;\n      this.$validations = {};\n      this.$validationMessages = [];\n\n      return $init.apply( this, arguments );\n    };\n  });\n\n  if ( required )\n  {\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        if ( this.$isDeleted() )\n        {\n          Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n          return Promise.resolve( this );\n        }\n\n        if ( !this.$validate() )\n        {\n          return Promise.resolve( this );\n        }\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n});\n\nModel.Events.PreValidate = 'pre-validate';\n\nModel.Events.ValidatePass = 'validate-pass';\n\nModel.Events.ValidateFail = 'validate-fail';\n\nvar Validation =\n{\n  Rules: {},\n  Expression: {},\n  Expressions: [],\n  Delimiter: /([|])/,\n  Escape: '\\\\',\n  RuleSeparator: ':',\n  Stop: {},\n\n  parseRules: function(rules, field, database, getAlias, message)\n  {\n    var validators = [];\n\n    if ( isString( rules ) )\n    {\n      rules = split( rules, this.Delimiter, this.Escape );\n    }\n\n    if ( isArray( rules ) )\n    {\n      for (var i = 0; i < rules.length; i++)\n      {\n        var rule = rules[ i ];\n        var validator = this.parseRule( rule, field, database, getAlias, message );\n\n        validators.push( validator );\n      }\n    }\n    else if ( isObject( rules ) )\n    {\n      for (var rule in rules)\n      {\n        var ruleMessageOrData = rules[ rule ];\n\n        var ruleMessage = isObject( ruleMessageOrData ) ? ruleMessageOrData.message :\n          ( isString( ruleMessageOrData ) ? ruleMessageOrData : undefined );\n\n        var ruleInput = isObject( ruleMessageOrData ) && ruleMessageOrData.message ? ruleMessageOrData.input :\n          ( isString( ruleMessageOrData ) ? undefined : ruleMessageOrData );\n\n        var validator = this.parseRule( rule, field, database, getAlias, ruleMessage || message, ruleInput );\n\n        validators.push( validator );\n      }\n    }\n\n    return validators;\n  },\n\n  parseRule: function(rule, field, database, getAlias, message, input)\n  {\n    var colon = rule.indexOf( this.RuleSeparator );\n    var ruleName = colon === -1 ? rule : rule.substring( 0, colon );\n\n    if ( ruleName.charAt( 0 ) === '$' )\n    {\n      return this.customValidator( ruleName, field, database, getAlias, message );\n    }\n\n    var ruleParams = colon === -1 ? input : rule.substring( colon + 1 );\n    var validatorFactory = Validation.Rules[ ruleName ];\n\n    if ( !validatorFactory )\n    {\n      throw ruleName + ' is not a valid rule';\n    }\n\n    return validatorFactory( field, ruleParams, database, getAlias, message );\n  },\n\n  parseExpression: function(expr, database)\n  {\n    var parsers = Validation.Expressions;\n\n    for (var i = 0; i < parsers.length; i++)\n    {\n      var parser = parsers[ i ];\n      var expressionFunction = parser( expr, database );\n\n      if ( isFunction( expressionFunction ) )\n      {\n        return expressionFunction; // (value, model)\n      }\n    }\n\n    return noop;\n  },\n\n  customValidator: function(functionName, field, database, getAlias, message)\n  {\n    return function(value, model, setMessage)\n    {\n      var result = model[ functionName ]( value, getAlias, message );\n\n      if ( isString( result ) )\n      {\n        setMessage( result );\n      }\n\n      return value;\n    };\n  }\n};\n","Validation.Expression.date =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = parseDate( expr );\n\n  if ( parsed !== false )\n  {\n    var parsedTime = parsed.getTime();\n\n    return function(value, model)\n    {\n      return parsedTime;\n    };\n  }\n}) - 1;\n","Validation.Expression.field =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( indexOf( database.fields, expr ) )\n  {\n    return function(value, model)\n    {\n      return model.$get( expr );\n    };\n  }\n}) - 1;\n","\nvar RELATIVE_REGEX = /^([+-]\\d+(\\.\\d+)?)\\s*(.+)$/;\n\nvar RELATIVE_UNITS = {\n  ms: 1,\n  millisecond: 1,\n  milliseconds: 1,\n  s: 1000,\n  second: 1000,\n  seconds: 1000,\n  min: 1000 * 60,\n  mins: 1000 * 60,\n  minute: 1000 * 60,\n  minutes: 1000 * 60,\n  hr: 1000 * 60 * 60,\n  hour: 1000 * 60 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n  days: 1000 * 60 * 60 * 24,\n  wk: 1000 * 60 * 60 * 24 * 7,\n  week: 1000 * 60 * 60 * 24 * 7,\n  weeks: 1000 * 60 * 60 * 24 * 7,\n  month: ['getMonth', 'setMonth'],\n  months: ['getMonth', 'setMonth'],\n  yr: ['getFullYear', 'setFullYear'],\n  year: ['getFullYear', 'setFullYear'],\n  years: ['getFullYear', 'setFullYear']\n};\n\nValidation.Expression.relative =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = RELATIVE_REGEX.exec( expr );\n\n  if ( parsed !== null )\n  {\n    var amount = parseFloat( parsed[ 1 ] );\n    var unit = parsed[ 3 ];\n    var unitScale = RELATIVE_UNITS[ unit ];\n\n    if ( !unitScale )\n    {\n      throw unit + ' is not a valid unit.';\n    }\n\n    return function(value, model)\n    {\n      var relative = new Date();\n\n      if ( isNumber( unitScale ) )\n      {\n        relative.setTime( relative.getTime() + unitScale * amount );\n      }\n      else\n      {\n        var getter = unitScale[0];\n        var setter = unitScale[1];\n\n        relative[ setter ]( relative[ getter ]() + amount );\n      }\n\n      return relative.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.today =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'today' )\n  {\n    return function(value, model)\n    {\n      var today = new Date();\n\n      startOfDay( today );\n\n      return today.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.tomorrow =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'tomorrow' )\n  {\n    return function(value, model)\n    {\n      var tomorrow = new Date();\n\n      tomorrow.setDate( tomorrow.getDate() + 1 );\n      startOfDay( tomorrow );\n\n      return tomorrow.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.yesterday =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'yesterday' )\n  {\n    return function(value, model)\n    {\n      var yesterday = new Date();\n\n      yesterday.setDate( yesterday.getDate() - 1 );\n      startOfDay( yesterday );\n\n      return yesterday.getTime();\n    };\n  }\n}) - 1;\n","// accepted\nValidation.Rules.accepted = function(field, params, database, getAlias, message)\n{\n  checkNoParams( 'accepted', field, params );\n\n  var messageTemplate = determineMessage( 'accepted', message );\n  var acceptable = Validation.Rules.accepted.acceptable;\n\n  return function(value, model, setMessage)\n  {\n    var valueString = (value + '').toLowerCase();\n    var accepted = acceptable[ valueString ];\n\n    if ( !accepted )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.accepted.message = '{$alias} has not been accepted.';\n\nValidation.Rules.accepted.acceptable =\n{\n  '1':    true,\n  'yes':  true,\n  'on':   true,\n  'y':    true,\n  'true': true\n};\n","// required\nruleGenerator('required',\n  '{$alias} is required.',\n  function isInvalid(value) {\n    return isEmpty( value );\n  }\n);\n","\nruleGenerator('array',\n  '{$alias} must be an array.',\n  function isInvalid(value) {\n    return !isArray( value );\n  }\n);\n\nruleGenerator('object',\n  '{$alias} must be an object.',\n  function isInvalid(value) {\n    return !isObject( value );\n  }\n);\n\nruleGenerator('string',\n  '{$alias} must be a string.',\n  function isInvalid(value) {\n    return !isString( value );\n  }\n);\n\nruleGenerator('number',\n  '{$alias} must be a number.',\n  function isInvalid(value) {\n    return !isNumber( value );\n  }\n);\n\nruleGenerator('boolean',\n  '{$alias} must be a true or false.',\n  function isInvalid(value) {\n    return !isBoolean( value );\n  }\n);\n\nruleGenerator('model',\n  '{$alias} must have a value.',\n  function isInvalid(value) {\n    return !(value instanceof Model);\n  }\n);\n\nruleGenerator('whole',\n  '{$alias} must be a whole number.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseInt( value );\n    var numeric = parseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      invalid = Math.floor( parsed ) !== numeric;\n      if ( !invalid ) {\n        setValue( parsed );\n      }\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('numeric',\n  '{$alias} must be numeric.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      setValue( parsed );\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('yesno',\n  '{$alias} must be a yes or no.',\n  function isInvalid(value, model, setValue) {\n    var mapped = Validation.Rules.yesno.map[ value ];\n    var invalid = !isBoolean( mapped );\n    if ( !invalid ) {\n      setValue( mapped );\n    }\n    return invalid;\n  }\n);\n\nValidation.Rules.yesno.map =\n{\n  'true':   true,\n  't':      true,\n  'yes':    true,\n  'y':      true,\n  '1':      true,\n  'false':  false,\n  'f':      false,\n  'no':     false,\n  'n':      false,\n  '0':      false\n};\n","Validation.Rules.abs = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = Math.abs( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.apply = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    model.$set( field, value );\n    \n    return value;\n  };\n};\n","Validation.Rules.base64 = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( global.btoa )\n    {\n      value = global.btoa( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.ceil = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.ceil( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.endOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    return endOfDay( value );\n  };\n};\n","Validation.Rules.filter = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      for (var i = value.length - 1; i >= 0; i--)\n      {\n        if ( !isValue( value[ i ] ) )\n        {\n          value.splice( i, 1 );\n        }\n      }\n    }\n    else if ( isObject( value ) )\n    {\n      for (var prop in value)\n      {\n        if ( !isValue( value[ prop ] ) )\n        {\n          delete value[ prop ];\n        }\n      }\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.floor = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.floor( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.mod = function(field, params, database, alias, message)\n{\n  var number = tryParseFloat( params );\n\n  if ( !isNumber( number ) )\n  {\n    throw '\"' + number + '\" is not a valid number for the mod rule.';\n  }\n\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = value % number;\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.null = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    model.$set( field, null );\n\n    return null;\n  };\n};\n","Validation.Rules.round = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = Math.round( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.startOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    return startOfDay( value );\n  };\n};\n","Validation.Rules.trim = function(field, params, database, alias, message)\n{\n  // String.trim polyfill\n  if ( !String.prototype.trim )\n  {\n    var regex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n    String.prototype.trim = function()\n    {\n      return this.replace( regex, '' );\n    };\n  }\n\n  return function(value, model, setMessage)\n  {\n    if ( isString( value ) )\n    {\n      value = value.trim();\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.unbase64 = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( global.atob )\n    {\n      value = global.atob( value );\n    }\n\n    return value;\n  };\n};\n","\n\n  Rekord.Validation = Validation;\n\n  Rekord.ruleGenerator = ruleGenerator;\n  Rekord.rangeRuleGenerator = rangeRuleGenerator;\n  Rekord.collectionRuleGenerator = collectionRuleGenerator;\n  Rekord.dateRuleGenerator = dateRuleGenerator;\n  Rekord.fieldListRuleGenerator = fieldListRuleGenerator;\n  Rekord.fieldsRuleGenerator = fieldsRuleGenerator;\n  Rekord.foreignRuleGenerator = foreignRuleGenerator;\n  Rekord.subRuleGenerator = subRuleGenerator;\n  Rekord.listRuleGenerator = listRuleGenerator;\n  Rekord.regexRuleGenerator = regexRuleGenerator;\n  Rekord.sizeRuleGenerator = sizeRuleGenerator;\n\n  Rekord.joinFriendly = joinFriendly;\n  Rekord.tryParseFloat = tryParseFloat;\n  Rekord.tryParseInt = tryParseInt;\n  Rekord.startOfDay = startOfDay;\n  Rekord.endOfDay = endOfDay;\n  Rekord.determineMessage = determineMessage;\n  Rekord.mapFromArray = mapFromArray;\n  Rekord.checkNoParams = checkNoParams;\n  Rekord.generateMessage = generateMessage;\n\n})(this, Rekord);\n"],"sourceRoot":"/source/"}