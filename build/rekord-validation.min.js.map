{"version":3,"sources":["rekord-validation.min.js"],"names":["root","factory","define","amd","Rekord","module","exports","global","require","this","undefined","ValidationChain","model","field","validations","onEnd","tryParseFloat","x","parsed","parseFloat","isNaN","tryParseInt","parseInt","startOfDay","d","isDate","setHours","isNumber","endOfDay","ruleGenerator","ruleName","defaultMessage","isInvalid","Validation","Rules","params","database","getAlias","message","checkNoParams","messageTemplate","determineMessage","value","chain","invalid","generateMessage","next","joinFriendly","arr","lastSeparatorCustom","itemSeparatorCustom","copy","slice","i","length","last","pop","lastSeparator","itemSeparator","join","mapFromArray","map","alias","extra","isFunction","base","$field","$alias","$value","transfer","isObject","format","collectionRuleGenerator","matchField","matchValue","equality","isString","comma","indexOf","substring","isArray","equals","equalsCompare","fields","$matchField","$matchAlias","$matchValue","dateRuleGenerator","dateExpression","parseExpression","parseDate","parsedTime","getTime","noop","$date","date","fieldListRuleGenerator","matchValues","parts","split","shift","values","list","$params","$list","fieldsRuleGenerator","fieldNames","fieldAliases","$fields","$fieldAliases","foreignRuleGenerator","modelName","models","fieldName","isValue","name","ModelCollection","get","success","modelClass","all","isRekord","$class","subRuleGenerator","otherField","otherRules","colon","rules","validators","parseRules","invalids","chainCount","onChainEnd","innerChain","valid","stop","testValue","$get","start","listRuleGenerator","inList","isPrimitiveArray","rangeRuleGenerator","defaultMessages","end","range","string","number","object","$start","$end","size","sizeof","type","typeMessage","$size","regexRuleGenerator","regex","test","sizeRuleGenerator","$number","Model","Database","Promise","Collection","Class","isEmpty","isBoolean","isRegExp","create","reset","updated","linkIndex","call","update","newValue","n","addPlugin","db","options","aliases","validation","Defaults","messages","required","method","callback","context","$trigger","Events","PreValidate","$valid","$validations","$validationMessages","chainEnds","chains","push","ValidatePass","ValidateFail","replace","$init","apply","arguments","$save","$isDeleted","debug","Debugs","SAVE_DELETED","$db","resolve","promise","modelInstance","args","$validate","saving","then","reject","noline","cancel","Expression","Expressions","Delimiter","Escape","RuleSeparator","Stop","rule","defaultMessageValidator","parseRule","ruleProperty","ruleMessageOrData","ruleMessage","ruleInput","input","customMessageValidator","charAt","customValidator","ruleParams","validatorFactory","expr","parsers","parser","expressionFunction","functionName","result","RELATIVE_REGEX","RELATIVE_UNITS","ms","millisecond","milliseconds","s","second","seconds","min","mins","minute","minutes","hr","hour","hours","day","days","wk","week","weeks","month","months","yr","year","years","relative","exec","amount","unit","unitScale","Date","setTime","getter","setter","today","tomorrow","setDate","getDate","yesterday","accepted","acceptable","valueString","toLowerCase","1","yes","on","y","true","contains","m","validate","messageOption","related","pluck","confirmed","different","invalidCount","totalCount","RegExp","numeric","Math","floor","mapped","yesno","t","false","f","no","0","abs","$set","base64","btoa","ceil","filter","splice","prop","mod","round","stripEnts","stripTags","trim","String","prototype","unbase64","atob"],"mappings":"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","file":"rekord-validation.min.js","sourcesContent":["/* rekord-validation 1.5.0 - Advanced validation rules for rekord by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['rekord'], function(Rekord) { // jshint ignore:line\n      return factory(root, Rekord);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('rekord'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord);\n  }\n}(this, function(global, Rekord, undefined)\n{\n\n  var Model = Rekord.Model;\n  var Database = Rekord.Database;\n  var Promise = Rekord.Promise;\n  var Collection = Rekord.Collection;\n  var ModelCollection = Rekord.ModelCollection;\n  var Class = Rekord.Class;\n\n  var isEmpty = Rekord.isEmpty;\n  var isString = Rekord.isString;\n  var isArray = Rekord.isArray;\n  var isObject = Rekord.isObject;\n  var isFunction = Rekord.isFunction;\n  var isDate = Rekord.isDate;\n  var isNumber = Rekord.isNumber;\n  var isBoolean = Rekord.isBoolean;\n  var isValue = Rekord.isValue;\n  var isPrimitiveArray = Rekord.isPrimitiveArray;\n  var isRegExp = Rekord.isRegExp;\n  var isRekord = Rekord.isRekord;\n\n  var noop = Rekord.noop;\n  var equalsCompare = Rekord.equalsCompare;\n  var equals = Rekord.equals;\n  var indexOf = Rekord.indexOf;\n  var sizeof = Rekord.sizeof;\n\n  var split = Rekord.split;\n  var transfer = Rekord.transfer;\n  var format = Rekord.format;\n\n  var parseDate = Rekord.parseDate;\n\n\nfunction ValidationChain(model, field, validations, onEnd)\n{\n  this.model = model;\n  this.field = field;\n  this.validations = validations;\n  this.onEnd = onEnd;\n}\n\nClass.create( ValidationChain,\n{\n\n  reset: function(value)\n  {\n    this.value = value !== undefined ? value : this.model.$get( this.field );\n    this.updated = false;\n    this.valid = true;\n    this.message = '';\n    this.linkIndex = 0;\n  },\n\n  start: function(value)\n  {\n    this.reset( value );\n    this.call();\n  },\n\n  call: function()\n  {\n    this.validations[ this.linkIndex ]( this.value, this.model, this );\n  },\n\n  update: function(newValue)\n  {\n    this.value = newValue;\n    this.updated = true;\n\n    return this;\n  },\n\n  next: function()\n  {\n    var n = this.validations.length;\n\n    this.linkIndex++;\n\n    if (this.linkIndex === n)\n    {\n      this.onEnd( this );\n    }\n    else if (this.linkIndex < n)\n    {\n      this.call();\n    }\n\n    return this;\n  },\n\n  stop: function()\n  {\n    var n = this.validations.length;\n\n    if (this.linkIndex < n)\n    {\n      this.linkIndex = n - 1;\n      this.next();\n    }\n\n    return this;\n  },\n\n  invalid: function(message)\n  {\n    this.message = message;\n    this.valid = false;\n    this.stop();\n\n    return this;\n  }\n\n});\n\nfunction tryParseFloat(x)\n{\n  var parsed = parseFloat( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseInt(x)\n{\n  var parsed = parseInt( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction startOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 0, 0, 0, 0 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000);\n  }\n\n  return d;\n}\n\nfunction endOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 23, 59, 59, 999 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000) + 86400000 - 1;\n  }\n\n  return d;\n}\n\nfunction ruleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, chain)\n    {\n      if ( isInvalid( value, model, chain ) )\n      {\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nfunction determineMessage(ruleName, message)\n{\n  return message || Validation.Rules[ ruleName ].message;\n}\n\nfunction joinFriendly(arr, lastSeparatorCustom, itemSeparatorCustom, getAlias)\n{\n  var copy = arr.slice();\n\n  if ( getAlias )\n  {\n    for (var i = 0; i < copy.length; i++)\n    {\n      copy[ i ] = getAlias( copy[ i ] );\n    }\n  }\n\n  var last = copy.pop();\n  var lastSeparator = lastSeparatorCustom || 'and';\n  var itemSeparator = itemSeparatorCustom || ', ';\n\n  switch (copy.length) {\n    case 0:\n      return last;\n    case 1:\n      return copy[ 0 ] + ' ' + lastSeparator + ' ' + last;\n    default:\n      return copy.join( itemSeparator ) + itemSeparator + lastSeparator + ' ' + last;\n  }\n}\n\nfunction mapFromArray(arr, value)\n{\n  var map = {};\n\n  for (var i = 0; i < arr.length; i++)\n  {\n    map[ arr[ i ] ] = value;\n  }\n\n  return map;\n}\n\nfunction checkNoParams(ruleName, field, params)\n{\n  if ( params )\n  {\n    throw 'the rule ' + ruleName + ' for field ' + field + ' has no arguments';\n  }\n}\n\nfunction generateMessage(field, alias, value, model, message, extra)\n{\n  if ( isFunction( message ) )\n  {\n    message = message( field, alias, value, model, extra );\n  }\n\n  var base = {};\n  base.$field = field;\n  base.$alias = alias;\n  base.$value = value;\n\n  transfer( model, base );\n\n  if ( isObject( extra ) )\n  {\n    transfer( extra, base );\n  }\n\n  return format( message, base );\n}\n\nRekord.addPlugin(function(model, db, options)\n{\n  var validation = options.validation || Database.Defaults.validation;\n\n  if ( isEmpty( validation ) )\n  {\n    return;\n  }\n\n  var rules = validation.rules || {};\n  var messages = validation.messages || {};\n  var aliases = validation.aliases || {};\n  var required = !!validation.required;\n\n  function getAlias(field)\n  {\n    return aliases[ field ] || field;\n  }\n\n  db.validations = {};\n\n  for ( var field in rules )\n  {\n    db.validations[ field ] = Validation.parseRules( rules[ field ], field, db, getAlias, messages[ field ] );\n  }\n\n  Class.method( model, '$validate', function(callback, context)\n  {\n    this.$trigger( Model.Events.PreValidate, [this] );\n\n    this.$valid = true;\n    this.$validations = {};\n    this.$validationMessages.length = 0;\n\n    var chainEnds = 0;\n    var chains = [];\n\n    var onChainEnd = function(chain)\n    {\n      var model = chain.model;\n\n      if (!chain.valid)\n      {\n        model.$validations[ chain.field ] = chain.message;\n        model.$validationMessages.push( chain.message );\n        model.$valid = false;\n      }\n\n      if (++chainEnds === chains.length)\n      {\n        model.$trigger( model.$valid ? Model.Events.ValidatePass : Model.Events.ValidateFail, [model] );\n\n        if ( isFunction( callback ) )\n        {\n          callback.call( context || model, model.$valid );\n        }\n      }\n    };\n\n    for (var field in db.validations)\n    {\n      var validations = db.validations[ field ];\n      var chain = new ValidationChain( this, field, validations, onChainEnd );\n\n      chains.push( chain );\n    }\n\n    for (var i = 0; i < chains.length; i++)\n    {\n      chains[ i ].start();\n    }\n\n    return this.$valid;\n  });\n\n  Class.replace( model, '$init', function($init)\n  {\n    return function()\n    {\n      this.$valid = undefined;\n      this.$validations = {};\n      this.$validationMessages = [];\n\n      return $init.apply( this, arguments );\n    };\n  });\n\n  if ( required )\n  {\n    Class.replace( model, '$save', function($save)\n    {\n      return function()\n      {\n        if ( this.$isDeleted() )\n        {\n          Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n          return Promise.resolve( this );\n        }\n\n        var promise = new Rekord.Promise();\n        var modelInstance = this;\n        var args = arguments;\n\n        this.$validate(function(valid)\n        {\n          if (!valid)\n          {\n            promise.reject( modelInstance );\n          }\n          else\n          {\n            var saving = $save.apply( modelInstance, args );\n\n            saving.then( promise.resolve, promise.reject, promise.noline, promise.cancel, promise );\n          }\n        });\n\n        return promise;\n      };\n    });\n  }\n});\n\nModel.Events.PreValidate = 'pre-validate';\n\nModel.Events.ValidatePass = 'validate-pass';\n\nModel.Events.ValidateFail = 'validate-fail';\n\nvar Validation =\n{\n  Rules: {},\n  Expression: {},\n  Expressions: [],\n  Delimiter: /([|])/,\n  Escape: '\\\\',\n  RuleSeparator: ':',\n  Stop: {},\n\n  parseRules: function(rules, field, database, getAlias, message)\n  {\n    var validators = [];\n\n    if ( isString( rules ) )\n    {\n      rules = split( rules, this.Delimiter, this.Escape );\n    }\n\n    if ( isArray( rules ) )\n    {\n      for (var i = 0; i < rules.length; i++)\n      {\n        var rule = rules[ i ];\n        var defaultMessageValidator = this.parseRule( rule, field, database, getAlias, message );\n\n        validators.push( defaultMessageValidator );\n      }\n    }\n    else if ( isObject( rules ) )\n    {\n      for (var ruleProperty in rules)\n      {\n        var ruleMessageOrData = rules[ ruleProperty ];\n\n        var ruleMessage = isObject( ruleMessageOrData ) ? ruleMessageOrData.message :\n          ( isString( ruleMessageOrData ) ? ruleMessageOrData : undefined );\n\n        var ruleInput = isObject( ruleMessageOrData ) && ruleMessageOrData.message ? ruleMessageOrData.input :\n          ( isString( ruleMessageOrData ) ? undefined : ruleMessageOrData );\n\n        var customMessageValidator = this.parseRule( ruleProperty, field, database, getAlias, ruleMessage || message, ruleInput );\n\n        validators.push( customMessageValidator );\n      }\n    }\n\n    return validators;\n  },\n\n  parseRule: function(rule, field, database, getAlias, message, input)\n  {\n    var colon = rule.indexOf( this.RuleSeparator );\n    var ruleName = colon === -1 ? rule : rule.substring( 0, colon );\n\n    if ( ruleName.charAt( 0 ) === '$' )\n    {\n      return this.customValidator( ruleName, field, database, getAlias, message );\n    }\n\n    var ruleParams = colon === -1 ? input : rule.substring( colon + 1 );\n    var validatorFactory = Validation.Rules[ ruleName ];\n\n    if ( !validatorFactory )\n    {\n      throw ruleName + ' is not a valid rule';\n    }\n\n    return validatorFactory( field, ruleParams, database, getAlias, message );\n  },\n\n  parseExpression: function(expr, database)\n  {\n    var parsers = Validation.Expressions;\n\n    for (var i = 0; i < parsers.length; i++)\n    {\n      var parser = parsers[ i ];\n      var expressionFunction = parser( expr, database );\n\n      if ( isFunction( expressionFunction ) )\n      {\n        return expressionFunction; // (value, model)\n      }\n    }\n\n    return noop;\n  },\n\n  customValidator: function(functionName, field, database, getAlias, message)\n  {\n    return function(value, model, chain)\n    {\n      var result = model[ functionName ]( value, getAlias, message, chain );\n\n      if ( isString( result ) )\n      {\n        chain.invalid( result );\n      }\n      else if ( result !== false )\n      {\n        chain.next();\n      }\n    };\n  }\n};\n\nValidation.Expression.date =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = parseDate( expr );\n\n  if ( parsed !== false )\n  {\n    var parsedTime = parsed.getTime();\n\n    return function(value, model)\n    {\n      return parsedTime;\n    };\n  }\n}) - 1;\n\nValidation.Expression.field =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( indexOf( database.fields, expr ) )\n  {\n    return function(value, model)\n    {\n      return model.$get( expr );\n    };\n  }\n}) - 1;\n\n\nvar RELATIVE_REGEX = /^([+-]\\d+(\\.\\d+)?)\\s*(.+)$/;\n\nvar RELATIVE_UNITS = {\n  ms: 1,\n  millisecond: 1,\n  milliseconds: 1,\n  s: 1000,\n  second: 1000,\n  seconds: 1000,\n  min: 1000 * 60,\n  mins: 1000 * 60,\n  minute: 1000 * 60,\n  minutes: 1000 * 60,\n  hr: 1000 * 60 * 60,\n  hour: 1000 * 60 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n  days: 1000 * 60 * 60 * 24,\n  wk: 1000 * 60 * 60 * 24 * 7,\n  week: 1000 * 60 * 60 * 24 * 7,\n  weeks: 1000 * 60 * 60 * 24 * 7,\n  month: ['getMonth', 'setMonth'],\n  months: ['getMonth', 'setMonth'],\n  yr: ['getFullYear', 'setFullYear'],\n  year: ['getFullYear', 'setFullYear'],\n  years: ['getFullYear', 'setFullYear']\n};\n\nValidation.Expression.relative =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = RELATIVE_REGEX.exec( expr );\n\n  if ( parsed !== null )\n  {\n    var amount = parseFloat( parsed[ 1 ] );\n    var unit = parsed[ 3 ];\n    var unitScale = RELATIVE_UNITS[ unit ];\n\n    if ( !unitScale )\n    {\n      throw unit + ' is not a valid unit.';\n    }\n\n    return function(value, model)\n    {\n      var relative = new Date();\n\n      if ( isNumber( unitScale ) )\n      {\n        relative.setTime( relative.getTime() + unitScale * amount );\n      }\n      else\n      {\n        var getter = unitScale[0];\n        var setter = unitScale[1];\n\n        relative[ setter ]( relative[ getter ]() + amount );\n      }\n\n      return relative.getTime();\n    };\n  }\n}) - 1;\n\nValidation.Expression.today =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'today' )\n  {\n    return function(value, model)\n    {\n      var today = new Date();\n\n      startOfDay( today );\n\n      return today.getTime();\n    };\n  }\n}) - 1;\n\nValidation.Expression.tomorrow =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'tomorrow' )\n  {\n    return function(value, model)\n    {\n      var tomorrow = new Date();\n\n      tomorrow.setDate( tomorrow.getDate() + 1 );\n      startOfDay( tomorrow );\n\n      return tomorrow.getTime();\n    };\n  }\n}) - 1;\n\nValidation.Expression.yesterday =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'yesterday' )\n  {\n    return function(value, model)\n    {\n      var yesterday = new Date();\n\n      yesterday.setDate( yesterday.getDate() - 1 );\n      startOfDay( yesterday );\n\n      return yesterday.getTime();\n    };\n  }\n}) - 1;\n\n// accepted\nValidation.Rules.accepted = function(field, params, database, getAlias, message)\n{\n  checkNoParams( 'accepted', field, params );\n\n  var messageTemplate = determineMessage( 'accepted', message );\n  var acceptable = Validation.Rules.accepted.acceptable;\n\n  return function(value, model, chain)\n  {\n    var valueString = (value + '').toLowerCase();\n    var accepted = acceptable[ valueString ];\n\n    if ( !accepted )\n    {\n      chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n    else\n    {\n      chain.next();\n    }\n  };\n};\n\nValidation.Rules.accepted.message = '{$alias} has not been accepted.';\n\nValidation.Rules.accepted.acceptable =\n{\n  '1':    true,\n  'yes':  true,\n  'on':   true,\n  'y':    true,\n  'true': true\n};\n\n// contains:field,value\ncollectionRuleGenerator('contains',\n  '{$alias} does not contain an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return !value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\n// not_contains:field,value\ncollectionRuleGenerator('not_contains',\n  '{$alias} contains an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\nfunction collectionRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var matchField, matchValue, equality;\n\n    if ( isString( params ) )\n    {\n      var comma = params.indexOf(',');\n\n      if ( comma === -1 )\n      {\n        throw ruleName + ' validation rule requires field & value arguments';\n      }\n\n      matchField = params.substring( 0, comma );\n      matchValue = params.substring( comma + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params[ 0 ];\n      matchValue = params[ 1 ];\n      equality = params[ 2 ];\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValue = params.value;\n      equality = params.equals;\n    }\n\n    if ( !isFunction( equality ) )\n    {\n      equality = equalsCompare;\n    }\n\n    if ( indexOf( database.fields, matchField ) === -1 )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $matchValue: matchValue\n    };\n\n    return function(value, model, chain)\n    {\n      if ( isInvalid( value, model, matchField, matchValue, equality ) )\n      {\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.validate = function(field, params, database, getAlias, message)\n{\n  // message, models, validations\n  var messageOption = params || 'message';\n  var messageTemplate = determineMessage( 'validate', message );\n\n  return function(value, model, chain)\n  {\n    if ( isArray( value ) )\n    {\n      var invalid = new Collection();\n\n      for (var i = 0; i < value.length; i++)\n      {\n        var related = value[ i ];\n\n        if ( related && related.$validate && !related.$validate() )\n        {\n          invalid.push( related );\n        }\n      }\n\n      if ( invalid.length )\n      {\n        switch (messageOption)\n        {\n          case 'models':\n            chain.invalid( invalid );\n            break;\n          case 'validations':\n            chain.invalid( invalid.pluck( '$validations', '$$key' ) );\n            break;\n          default: // message\n            chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n            break;\n        }\n      }\n      else\n      {\n        chain.next();\n      }\n    }\n    else\n    {\n      chain.next();\n    }\n  };\n};\n\nValidation.Rules.validate.message = '{$alias} is not valid.';\n\n// after:today\ndateRuleGenerator('after',\n  '{$alias} must be after {$date}.',\n  function isInvalid(value, date) {\n    return value < endOfDay( date );\n  }\n);\n\n// after_on:tomorrow\ndateRuleGenerator('after_on',\n  '{$alias} must be after or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value < date;\n  }\n);\n\n// before:yesterday\ndateRuleGenerator('before',\n  '{$alias} must be before {$date}.',\n  function isInvalid(value, date) {\n    return value > date;\n  }\n);\n\n// before_on:+2days\ndateRuleGenerator('before_on',\n  '{$alias} must be before or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value > endOfDay( date );\n  }\n);\n\n// date\nruleGenerator('date_like',\n  '{$alias} must be a valid date.',\n  function isInvalid(value, model, chain) {\n    var parsed = parseDate( value );\n    var invalid = parsed === false;\n    if ( !invalid ) {\n      chain.update( parsed.getTime() );\n    }\n    return invalid;\n  }\n);\n\nfunction dateRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a date expression argument';\n    }\n\n    var dateExpression;\n\n    if ( isString( params ) )\n    {\n      dateExpression = Validation.parseExpression( params, database );\n    }\n    else if ( isFunction( params ) )\n    {\n      dateExpression = params;\n    }\n    else\n    {\n      var parsed = parseDate( params );\n\n      if ( parsed !== false )\n      {\n        var parsedTime = parsed.getTime();\n\n        dateExpression = function()\n        {\n          return parsedTime;\n        };\n      }\n    }\n\n    if ( !dateExpression || dateExpression === noop )\n    {\n      throw params + ' is not a valid date expression for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $date: params\n    };\n\n    return function(value, model, chain)\n    {\n      var parsed = parseDate( value );\n\n      if ( parsed !== false )\n      {\n        value = parsed.getTime();\n\n        var date = dateExpression( value, model );\n\n        if ( isNumber( date ) && isInvalid( value, date ) )\n        {\n          chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n        else\n        {\n          chain.next();\n        }\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\n\n// required_if:X,Y,...\nfieldListRuleGenerator('required_if',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\n// required_unless:X,Y,...\nfieldListRuleGenerator('required_unless',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = !map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldListRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a field and list arguments';\n    }\n\n    var matchField, matchValues;\n\n    if ( isString( params ) )\n    {\n      var parts = split( params, /(,)/, '\\\\' );\n\n      matchField = parts.shift();\n      matchValues = parts;\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params.shift();\n      matchValues = params;\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValues = params.values;\n    }\n\n    if ( indexOf( database.fields, matchField ) === false )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( matchValues );\n    var extra = {\n      $params: params,\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $list: list\n    };\n    var map = mapFromArray( matchValues, true );\n\n    return function(value, model, chain)\n    {\n      if ( isInvalid( value, model, matchField, matchValues, map ) )\n      {\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\n// confirmed:X\nfieldsRuleGenerator('confirmed',\n  '{$alias} must match {$fieldAliases}.',\n  function isInvalid(value, model, fields, chain) {\n    var confirmed = true;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        confirmed = false;\n      }\n    }\n\n    return !confirmed;\n  }\n);\n\n// different:X\nfieldsRuleGenerator('different',\n  '{$alias} must not match {$fieldAliases}.',\n  function isInvalid(value, model, fields, chain) {\n    var different = false;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        different = true;\n      }\n    }\n\n    return !different;\n  }\n);\n\n// if_valid:X\nfieldsRuleGenerator('if_valid',\n  '',\n  function isInvalid(value, model, fields, chain) {\n    var valid = true;\n\n    for (var i = 0; i < fields.length && valid; i++)\n    {\n      if ( model.$validations[ fields[ i ] ] )\n      {\n        valid = false;\n      }\n    }\n\n    if ( !valid )\n    {\n      chain.stop();\n    }\n\n    return false;\n  }\n);\n\n// The field under validation must be present only if any of the other specified fields are present.\n// required_with:X,Y,...\nfieldsRuleGenerator('required_with',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, chain) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only if all of the other specified fields are present.\n// required_with_all:X,Y,...\nfieldsRuleGenerator('required_with_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, chain) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when any of the other specified fields are not present.\n// required_without:X,Y,...\nfieldsRuleGenerator('required_without',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, chain) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when all of the other specified fields are not present.\n// required_without_all:X,Y,...\nfieldsRuleGenerator('required_without_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, chain) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldsRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires an array of fields argument';\n    }\n\n    var fields = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( indexOf( database.fields, fields[ i ] ) === -1 )\n      {\n        throw fields[ i ] + ' is not a valid field for the ' + ruleName + ' rule';\n      }\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var fieldNames = joinFriendly( fields );\n    var fieldAliases = joinFriendly( fields, false, false, getAlias );\n    var extra = {\n      $fields: fieldNames,\n      $fieldAliases: fieldAliases\n    };\n\n    return function(value, model, chain)\n    {\n      if ( isInvalid( value, model, fields, chain ) )\n      {\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\n// exists:X,Y\nforeignRuleGenerator('exists',\n  '{$alias} must match an existing {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return !models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// unique:X,Y\nforeignRuleGenerator('unique',\n  '{$alias} must be a unique {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// 'ruleName'\n// 'ruleName:name'\n// 'ruleName:,field'\n// 'ruleName:name,field'\n// 'ruleName:name,field': '...'\n// 'ruleName': {input: {field: 'field', model: 'name'}, message: '...'}\n// 'ruleName': {input: {field: 'field', model: ModelClass}, message: '...'}\n// 'ruleName': {input: {field: 'field', models: [...]}, message: '...'}\n// 'ruleName': {field: 'field', model: 'name'}\n// 'ruleName': {field: 'field', model: ModelClass}\n// 'ruleName': {field: 'field', models: [...]}\nfunction foreignRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var modelName, models, fieldName;\n\n    if ( !isValue( params ) || isString( params ) )\n    {\n      var parts = split( params || '', /(\\s*,\\s*)/, '\\\\' );\n      modelName = parts[0] || database.name;\n      fieldName = parts[1] || field;\n      models = null;\n    }\n    else if ( isArray( params ) )\n    {\n      modelName = isString( params[0] ) ? params.shift() : database.name;\n      fieldName = isString( params[0] ) ? params.shift() : field;\n      models = new ModelCollection( database, params );\n    }\n    else if ( isObject( params ) )\n    {\n      modelName = params.model || database.name;\n      fieldName = params.field || field;\n      models = params.models;\n    }\n\n    if ( !models )\n    {\n      if ( !modelName )\n      {\n        throw 'model, model class, or models is required for ' + ruleName + ' rule';\n      }\n\n      if ( isString( modelName ) )\n      {\n        Rekord.get( modelName ).success(function(modelClass)\n        {\n          models = modelClass.all();\n        });\n      }\n      else if ( isRekord( modelName ) )\n      {\n        models = modelName.all();\n      }\n    }\n\n    if ( indexOf( database.fields, fieldName ) === false )\n    {\n      throw fieldName + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $class: modelName,\n      $matchField: fieldName,\n      $matchAlias: getAlias( fieldName )\n    };\n\n    return function(value, model, chain)\n    {\n      if ( models && isValue( value ) )\n      {\n        if ( isInvalid( value, model, models, fieldName ) )\n        {\n          chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n        else\n        {\n          chain.next();\n        }\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\n// if:due_date:before:today|required\n\n// if all rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount > 0;\n  }\n);\n\n// if any rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_any',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount >= totalCount;\n  }\n);\n\n// if no rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_not',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount < totalCount;\n  }\n);\n\n\n\nfunction subRuleGenerator(ruleName, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a validation rule argument';\n    }\n\n    var otherField, otherRules;\n\n    if ( isString( params ) )\n    {\n      var colon = params.indexOf( ':' );\n\n      if ( colon === -1 )\n      {\n        throw params + ' is not a valid argument for the ' + ruleName + ' rule';\n      }\n\n      otherField = params.substring( 0, colon ) || field;\n      otherRules = params.substring( colon + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      otherField = params.shift() || field;\n      otherRules = params;\n    }\n    else if ( isObject( params ) )\n    {\n      otherField = params.field || field;\n      otherRules = params.rules;\n    }\n\n    if ( indexOf( database.fields, otherField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    if ( !otherRules )\n    {\n      throw 'rules are required for the ' + ruleName + ' rule';\n    }\n\n    var validators = Validation.parseRules( otherRules, otherField, database, getAlias );\n\n    return function(value, model, chain)\n    {\n      var invalids = 0;\n      var chainCount = 0;\n\n      var onChainEnd = function(innerChain)\n      {\n        if (!innerChain.valid)\n        {\n          invalids++;\n        }\n\n        if (++chainCount === validators.length)\n        {\n          if ( isInvalid( invalids, chainCount ) )\n          {\n            chain.stop();\n          }\n          else\n          {\n            chain.next();\n          }\n        }\n      };\n\n      var testValue = otherField === field ? value : model.$get( otherField );\n\n      for (var i = 0; i < validators.length; i++)\n      {\n        var innerChain = new ValidationChain( model, otherField, [validators[ i ]], onChainEnd );\n\n        innerChain.start( testValue );\n      }\n    };\n  };\n}\n\n// in:X,Y,Z,...\nlistRuleGenerator('in',\n  '{$alias} must be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return !inList( value, model );\n  }\n);\n\n// not_in:X,Y,Z,...\nlistRuleGenerator('not_in',\n  '{$alias} must not be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return inList( value, model );\n  }\n);\n\nfunction listRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a list argument';\n    }\n\n    var values, inList = false;\n\n    if ( isString( params ) )\n    {\n      values = split( params, /(,)/, '\\\\' );\n    }\n    else if ( isArray( params ) )\n    {\n      values = params;\n    }\n    else if ( isFunction( params ) )\n    {\n      values = inList;\n    }\n\n    if ( inList !== false )\n    {\n      if ( !values || values.length === 0 )\n      {\n        throw params + ' is not a valid list of values for the ' + ruleName + ' rule';\n      }\n    }\n\n    if ( isPrimitiveArray( values ) )\n    {\n      var map = mapFromArray( values, true );\n\n      inList = function(value)\n      {\n        return map[ value ];\n      };\n    }\n    else\n    {\n      inList = function(value)\n      {\n        return indexOf( values, value, equals );\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( values, 'or' );\n    var extra = {\n      $params: params,\n      $list: list\n    };\n\n    return function(value, model, chain)\n    {\n      if ( isInvalid( value, model, inList ) )\n      {\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\n// between:3,10\nrangeRuleGenerator('between', {\n    'string': '{$alias} must have between {$start} to {$end} characters.',\n    'number': '{$alias} must be between {$start} and {$end}.',\n    'object': '{$alias} must have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value < start || value > end;\n  }\n);\n\n// not_between\nrangeRuleGenerator('not_between', {\n    'string': '{$alias} must not have between {$start} to {$end} characters.',\n    'number': '{$alias} must not be between {$start} and {$end}.',\n    'object': '{$alias} must not have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value >= start && value <= end;\n  }\n);\n\nfunction rangeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a range argument';\n    }\n\n    var start, end;\n\n    if ( isString( params ) )\n    {\n      var range = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n      start = parseFloat( range[0] );\n      end = parseFloat( range[1] );\n    }\n    else if ( isArray( params ) )\n    {\n      start = params[ 0 ];\n      end = params[ 1 ];\n    }\n    else if ( isObject( params ) )\n    {\n      start = params.start;\n      end = params.end;\n    }\n\n    if ( isNaN( start ) || isNaN( end ) )\n    {\n      throw params + ' is not a valid range of numbers for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $start: start,\n      $end: end\n    };\n\n    return function(value, model, chain)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, start, end ) )\n      {\n        extra.$size = size;\n\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n\n\n\nregexRuleGenerator('alpha',\n  '{$alias} should only contain alphabetic characters.',\n    /^[a-zA-Z]*$/\n);\n\nregexRuleGenerator('alpha_dash',\n  '{$alias} should only contain alpha-numeric characters, dashes, and underscores.',\n  /^[a-zA-Z0-9_-]*$/\n);\n\nregexRuleGenerator('alpha_num',\n  '{$alias} should only contain alpha-numeric characters.',\n  /^[a-zA-Z0-9]*$/\n);\n\nregexRuleGenerator('email',\n  '{$alias} is not a valid email.',\n  /^.+@.+\\..+$/\n);\n\nregexRuleGenerator('url',\n  '{$alias} is not a valid URL.',\n  /^(https?:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('uri',\n  '{$alias} is not a valid URI.',\n  /^(\\w+:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('phone',\n  '{$alias} is not a valid phone number.',\n  /^1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?$/\n);\n\nfunction regexRuleGenerator(ruleName, defaultMessage, regex)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, chain)\n    {\n      if ( !regex.test( value ) )\n      {\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n      else\n      {\n        chain.next();\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.regex = function(field, params, database, getAlias, message)\n{\n  var regex;\n\n  if ( isString( params ) )\n  {\n    var parsed = /^\\/(.*)\\/([gmi]*)$/.exec( params );\n\n    if ( parsed )\n    {\n      regex = new RegExp( parsed[1], parsed[2] );\n    }\n  }\n  else if ( isRegExp( params ) )\n  {\n    regex = params;\n  }\n\n  if ( !regex )\n  {\n    throw params + ' is not a valid regular expression for the regex rule';\n  }\n\n  var messageTemplate = determineMessage( 'regex', message );\n\n  return function(value, model, chain)\n  {\n    if ( !regex.test( value ) )\n    {\n      chain.invalid( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n    else\n    {\n      chain.next();\n    }\n  };\n};\n\nValidation.Rules.regex.message = '{$alias} is not a valid value.';\n\n// required\nruleGenerator('required',\n  '{$alias} is required.',\n  function isInvalid(value) {\n    return isEmpty( value );\n  }\n);\n\n// min:3\nsizeRuleGenerator('min', {\n    'string': '{$alias} must have a minimum of {$number} characters.',\n    'number': '{$alias} must be at least {$number}.',\n    'object': '{$alias} must have at least {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value < number;\n  }\n);\n\n// greater_than:0\nsizeRuleGenerator('greater_than', {\n    'string': '{$alias} must have more than {$number} characters.',\n    'number': '{$alias} must be greater than {$number}.',\n    'object': '{$alias} must have more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value <= number;\n  }\n);\n\n// max:10\nsizeRuleGenerator('max', {\n    'string': '{$alias} must have no more than {$number} characters.',\n    'number': '{$alias} must be no more than {$number}.',\n    'object': '{$alias} must have no more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value > number;\n  }\n);\n\n// less_than:5\nsizeRuleGenerator('less_than', {\n    'string': '{$alias} must have less than {$number} characters.',\n    'number': '{$alias} must be less than {$number}.',\n    'object': '{$alias} must have less than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value >= number;\n  }\n);\n\n// equal:4.5\nsizeRuleGenerator('equal', {\n    'string': '{$alias} must have {$number} characters.',\n    'number': '{$alias} must equal {$number}.',\n    'object': '{$alias} must have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value !== number;\n  }\n);\n\n// not_equal:0\nsizeRuleGenerator('not_equal', {\n    'string': '{$alias} must not have {$number} characters.',\n    'number': '{$alias} must not equal {$number}.',\n    'object': '{$alias} must not have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value === number;\n  }\n);\n\nfunction sizeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var number;\n\n    if ( isString( params ) )\n    {\n      number = parseFloat( params );\n    }\n    else if ( isNumber( params ) )\n    {\n      number = params;\n    }\n\n    if ( isNaN( number ) )\n    {\n      throw '\"' + params + '\" is not a valid number for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $number: params\n    };\n\n    return function(value, model, chain)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, number ) )\n      {\n        extra.$size = size;\n\n        chain.invalid( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n      else\n      {\n        chain.next();\n      }\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n\n\nruleGenerator('array',\n  '{$alias} must be an array.',\n  function isInvalid(value) {\n    return !isArray( value );\n  }\n);\n\nruleGenerator('object',\n  '{$alias} must be an object.',\n  function isInvalid(value) {\n    return !isObject( value );\n  }\n);\n\nruleGenerator('string',\n  '{$alias} must be a string.',\n  function isInvalid(value) {\n    return !isString( value );\n  }\n);\n\nruleGenerator('number',\n  '{$alias} must be a number.',\n  function isInvalid(value) {\n    return !isNumber( value );\n  }\n);\n\nruleGenerator('boolean',\n  '{$alias} must be a true or false.',\n  function isInvalid(value) {\n    return !isBoolean( value );\n  }\n);\n\nruleGenerator('model',\n  '{$alias} must have a value.',\n  function isInvalid(value) {\n    return !(value instanceof Model);\n  }\n);\n\nruleGenerator('whole',\n  '{$alias} must be a whole number.',\n  function isInvalid(value, model, chain) {\n    var parsed = tryParseInt( value );\n    var numeric = parseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      invalid = Math.floor( parsed ) !== numeric;\n      if ( !invalid ) {\n        chain.update( parsed );\n      }\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('numeric',\n  '{$alias} must be numeric.',\n  function isInvalid(value, model, chain) {\n    var parsed = tryParseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      chain.update( parsed );\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('yesno',\n  '{$alias} must be a yes or no.',\n  function isInvalid(value, model, chain) {\n    var mapped = Validation.Rules.yesno.map[ value ];\n    var invalid = !isBoolean( mapped );\n    if ( !invalid ) {\n      chain.update( mapped );\n    }\n    return invalid;\n  }\n);\n\nValidation.Rules.yesno.map =\n{\n  'true':   true,\n  't':      true,\n  'yes':    true,\n  'y':      true,\n  '1':      true,\n  'false':  false,\n  'f':      false,\n  'no':     false,\n  'n':      false,\n  '0':      false\n};\n\nValidation.Rules.abs = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      chain.update( Math.abs( value ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.apply = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    model.$set( field, value );\n\n    chain.next();\n  };\n};\n\nValidation.Rules.base64 = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    if ( global.btoa )\n    {\n      chain.update( global.btoa( value ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.ceil = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      chain.update( Math.ceil( value ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.endOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    chain.update( endOfDay( value ) );\n    \n    chain.next();\n  };\n};\n\nValidation.Rules.filter = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    if ( isArray( value ) )\n    {\n      for (var i = value.length - 1; i >= 0; i--)\n      {\n        if ( !isValue( value[ i ] ) )\n        {\n          value.splice( i, 1 );\n        }\n      }\n\n      chain.update( value );\n    }\n    else if ( isObject( value ) )\n    {\n      for (var prop in value)\n      {\n        if ( !isValue( value[ prop ] ) )\n        {\n          delete value[ prop ];\n        }\n      }\n\n      chain.update( value );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.floor = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      chain.update( Math.floor( value ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.mod = function(field, params, database, alias, message)\n{\n  var number = tryParseFloat( params );\n\n  if ( !isNumber( number ) )\n  {\n    throw '\"' + number + '\" is not a valid number for the mod rule.';\n  }\n\n  return function(value, model, chain)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      chain.update( value % number );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.null = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    model.$set( field, null );\n\n    chain.update( null );\n\n    chain.next();\n  };\n};\n\nValidation.Rules.round = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      chain.update( Math.round( value ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.startOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    chain.update( startOfDay( value ) );\n\n    chain.next();\n  };\n};\n\nValidation.Rules.stripEnts = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    if ( isString( value ) )\n    {\n      chain.update( value.replace( /&[a-z]+;/gi, '' ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.stripTags = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    if ( isString( value ) )\n    {\n      chain.update( value.replace( /<(?:.|\\n)*?>/gm, '' ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.trim = function(field, params, database, alias, message)\n{\n  var trim = (function()\n  {\n    if ( String.prototype.trim )\n    {\n      return function(x) {\n        return x.trim();\n      };\n    }\n\n    var regex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n    return function(x)\n    {\n      return x.replace( regex, '' );\n    };\n\n  })();\n\n  return function(value, model, chain)\n  {\n    if ( isString( value ) )\n    {\n      chain.update( trim( value ) );\n    }\n\n    chain.next();\n  };\n};\n\nValidation.Rules.unbase64 = function(field, params, database, alias, message)\n{\n  return function(value, model, chain)\n  {\n    if ( global.atob )\n    {\n      chain.update( global.atob( value ) );\n    }\n\n    chain.next();\n  };\n};\n\n\n  Rekord.Validation = Validation;\n\n  Rekord.ruleGenerator = ruleGenerator;\n  Rekord.rangeRuleGenerator = rangeRuleGenerator;\n  Rekord.collectionRuleGenerator = collectionRuleGenerator;\n  Rekord.dateRuleGenerator = dateRuleGenerator;\n  Rekord.fieldListRuleGenerator = fieldListRuleGenerator;\n  Rekord.fieldsRuleGenerator = fieldsRuleGenerator;\n  Rekord.foreignRuleGenerator = foreignRuleGenerator;\n  Rekord.subRuleGenerator = subRuleGenerator;\n  Rekord.listRuleGenerator = listRuleGenerator;\n  Rekord.regexRuleGenerator = regexRuleGenerator;\n  Rekord.sizeRuleGenerator = sizeRuleGenerator;\n\n  Rekord.joinFriendly = joinFriendly;\n  Rekord.tryParseFloat = tryParseFloat;\n  Rekord.tryParseInt = tryParseInt;\n  Rekord.startOfDay = startOfDay;\n  Rekord.endOfDay = endOfDay;\n  Rekord.determineMessage = determineMessage;\n  Rekord.mapFromArray = mapFromArray;\n  Rekord.checkNoParams = checkNoParams;\n  Rekord.generateMessage = generateMessage;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}